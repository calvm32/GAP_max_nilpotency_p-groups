<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Introduction">
<Heading>Introduction</Heading>

<P/>
<Section Label="Chapter_Introduction_Section_Core_Framework_Functions">
<Heading>Core Framework Functions</Heading>

<P/>
 <Package>typeset</Package> is a package that implements a typesetting framework
 that can be implemented for numerous typesetting languages as a standardised
 way to generate renderable strings.
<P/>
 At it's core, it implements the function <Ref Func="Typeset" /> which
 makes use of typesetting language-specific functions to generate format
 strings. These strings are then populated with a list of the semantic
 features of the &GAP; objects they represent, which is obtained from the
 operation <Ref Oper="GenArgs" Label="for IsObject" />.
<P/>
 An example implementation of this framework is also provided by this
 package for LaTeX typesetting within chapter <Ref Chap="Chapter_LaTeX_Generation" />.
<P/>
 Guidelines for extending the framework to support more types, or for
 implementing the framework for another typesetting language can
 be found within the contributing guidelines in the GitHub repository.
<P/>
<ManSection>
  <InfoClass Name="InfoTypeset" />
 <Description>
   Info class for the <Package>typeset</Package> package.  Set this to the following
   levels for different levels of information:
<List>
<Item>
0 - No messages
</Item>
<Item>
1 - Problems only: messages describing what went wrong, with no
           messages if an operation is successful
</Item>
<Item>
2 - Required preamble packages: displays informations about any required
           LaTeX packages that need to be added to the preamble to be rendered.
</Item>
<Item>
3 - Progress: also shows step-by-step progress of operations
</Item>
</List>
<P/>
   Set this using, for example <Code>SetInfoLevel(InfoTypeset, 1)</Code>.
   Default value is 2.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="obj[, options]" Name="Typeset" />
 <Returns>   A String, if <Code>ReturnStr</Code> option is set to <Code>true</Code>
</Returns>
 <Description>
   Generates a mark-up string representing the object <A>obj</A> in the given mark-up language. 
   &GAP; options can also be added to modify the result:
<List>
<Item>
<Code>ReturnStr</Code>     : Whether the method should return a string (<Code>true</Code>),
                          or simply print the result (<Code>false</Code>).         (default - <Code>false</Code>)
</Item>
<Item>
<Code>LDelim</Code>        : Left Delimiter for matrices.                  (default - <Code>"("</Code>)
</Item>
<Item>
<Code>RDelim</Code>        : Right Delimiter for matrices.                 (default - <Code>")"</Code>)
</Item>
<Item>
<Code>Lang</Code>          : Markup language of output, currently only
                          <Code>"latex"</Code> is supported.                       (default - <Code>"latex"</Code>)
</Item>
<Item>
<Code>DigraphOut</Code>    : Typesetting method for Digraphs, one of
                          <Code>"dot"</Code> to use raw dot within TeX, or <Code>"dot2tex"</Code>
                          to convert the dot to native TeX.             (default - <Code>"dot"</Code>)
</Item>
<Item>
<Code>SubCallOpts</Code>   : Alternate &GAP; options for nested sub-objects, via
                          a record with the same options as the parent
                          (but different values), or <Code>false</Code> if all options are
                          to stay the same between sub-calls. Options merging is
                          handled by <Ref Func="MergeSubOptions" />.       (default - <Code>false</Code>)
  either by specifying each options as an individual GAP options like below:
</Item>
</List>
<P/>
<Example><![CDATA[
gap> Typeset([[1, 2], [2, 1]] : LDelim := "[", ReturnStr := true);
"\\left[\\begin{array}{rr}\n1 & 2 \\\\\n2 & 1 \\\\\n\\end{array}\\right)\n"
]]></Example>


<P/>
  or wrapping them in a record under an <Code>options</Code> GAP option, like:
<P/>
<Example><![CDATA[
gap> Typeset([[1, 2], [2, 1]] : options := rec(LDelim := "[", ReturnStr := true));
"\\left[\\begin{array}{rr}\n1 & 2 \\\\\n2 & 1 \\\\\n\\end{array}\\right)\n"
]]></Example>


<P/>
 or even simply passing a record object as the optional second argument:
<P/>
<Example><![CDATA[
gap> Typeset([[1, 2], [2, 1]], rec(LDelim := "[", ReturnStr := true));
"\\left[\\begin{array}{rr}\n1 & 2 \\\\\n2 & 1 \\\\\n\\end{array}\\right)\n"
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="obj" Name="TypesetInternal" />
 <Returns>   A String
</Returns>
 <Description>
   Generates a string representation of a passed &GAP; object <A>obj</A> that
   can be rendered by a typesetter. Called from the top-level method
   <Ref Func="Typeset" />, which also passes a constructed options
   record as the <Code>options</Code> &GAP; option.
<P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Introduction_Section_Core_Operations">
<Heading>Core Operations</Heading>

<ManSection>
  <Oper Arg="obj" Name="GenArgs" Label="for IsObject"/>
 <Returns>  A List of Strings
</Returns>
 <Description>
   Generates the arguments describing the semantic definition of the passed &GAP;
   object <A>obj</A>. This returns a list that can be used to populate a format string in any
   mark-up language. If no method is installed for a type, it will fallback to returning the
   list [ ViewString(obj) ].
<P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Introduction_Section_Constants_and_Utility_Functions">
<Heading>Constants and Utility Functions</Heading>

<P/>
<ManSection>
  <Func Arg="opts" Name="MergeSubOptions" />
 <Returns>  A Record
</Returns>
 <Description>
   Merges the passed options record <A>opts</A> to change any values that are set in the &GAP; option
   <Code>SubCallOpts</Code>. If this option is not false (default), it can contain a record of any &GAP; options
   that can be passed to <Ref Func="Typeset" /> which should differ for sub-calls.
<P/>
   For example, to alter the delimiters for nested objects so that the outer object is delimited by
   square braces and the inner object by parentheses, the following can be set:
<P/>
<Example><![CDATA[
gap> MergeSubOptions(rec(ReturnStr := false, Lang := "latex", DigraphOut := "dot", RDelim := "]", LDelim := "[", SubCallOpts := rec(RDelim := ")", LDelim := "(")));
rec(ReturnStr := false, Lang := "latex", DigraphOut := "dot", RDelim := ")", LDelim := "(", SubCallOpts := false)
]]></Example>


<P/>
  It should be noted that <Code>SubCallOpts</Code> only changes the options for one level of recursion (i.e. it is set back
  to the default of <Code>false</Code> once this function is called). To change options for more recursion levels, the
  <Code>SubCallOpts</Code> option can be nested as many times as necessary.
<P/>
 </Description>
</ManSection>


<ManSection>
  <Var Name="DEFAULT_TYPESET_OPTIONS" />
 <Description>
   Default options record passed to <Ref Func="Typeset" />. Merged with user-provided
   options to ensure correct construction of options for sub-calls,
   whilst also allowing option-less calls to the method.
 </Description>
</ManSection>


</Section>


</Chapter>

