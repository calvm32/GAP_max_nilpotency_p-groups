<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_LaTeX_Generation">
<Heading>LaTeX Generation</Heading>

<P/>
<Section Label="Chapter_LaTeX_Generation_Section_LaTeX_Generation_Functions_for_GAP_Objects">
<Heading>LaTeX Generation Functions for GAP Objects</Heading>

<P/>
 The introduction in <Ref Sect="Chapter_Introduction_Section_Core_Framework_Functions" /> 
 describes a powerful framework created in this package allowing for a standardised
 methodology to generate typesetting strings via the semantic features of objects.
<P/>
 This section describes the implementation of the framework for LaTeX, providing both
 the invaluable functionality to typeset a subset of &GAP; objects as LaTeX strings
 whilst also serving as an example of how the framework can be used for other typesetting
 languages. 
<P/>
 It also provides some insight into the kinds of functions that would be expected
 from an implementation for a different language. A bare-boned example implementation
 for MathML is provided in <Ref Sect="Chapter_MathML_Example_Generation" />.
<P/>
 Currently, the following types have explicit methods installed for LaTeX generation:
<P/>
<List>
<Item>
Rationals (Integers and Fractions)
</Item>
<Item>
Infinity and Negative Infinity
</Item>
<Item>
Internal Finite-Field Elements
</Item>
<Item>
Permutations
</Item>
<Item>
Lists
</Item>
<Item>
Matrices
</Item>
<Item>
Polynomials and Non-Polynomial Rational Functions
</Item>
<Item>
Character Tables
</Item>
<Item>
Generators for FP, PC, Matrix and Permutation Groups
</Item>
<Item>
Associative Words in Letter Representation
</Item>
</List>
<P/>
 It should also be noted that <Ref Func="Typeset" /> does fallback to the core library
 function <Ref BookName="ref" Func="ViewString" />, which can be used for any types which
 do not require LaTeX-specific formatting to be renderable in math mode (e.g. floats).
<ManSection>
  <Oper Arg="obj" Name="GenLatexTmpl" Label="for IsObject"/>
 <Returns>   An Unpopulated LaTeX Format String
</Returns>
 <Description>
   Generates a format string that represents the structural definition of the given &GAP;
   object <A>obj</A> in LaTeX. It contains no parameter values, and will need to be
   populated with the arguments representing the semantic values of the object, generated
   via <Ref Oper="GenArgs" Label="for IsObject" />, before it can be rendered in a LaTeX environment.
<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="s" Name="CtblEntryLatex" />
 <Returns>  A String
</Returns>
 <Description>
   Formats a string representation of an entry <A>s</A> returned by
   the undocumented function <Code>CharacterTableDisplayStringEntryDefault</Code>
   to include the LaTeX-specific bar environment for complex conjugates.
<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="data" Name="CtblLegendLatex" />
 <Returns>  A String
</Returns>
 <Description>
   Generates a string representation of the mathematical substitutions <A>data</A>,
   generated by the undocumented function <Code>CharacterTableDisplayStringEntryDataDefault</Code>
   for entries within a character table.
<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="s" Name="GenNameAssocLetterLatex" />
 <Returns>  A String
</Returns>
 <Description>
   Generates a string representation of the provided letter string <A>s</A>
   correctly subscripted with a LaTeX math-mode subscript environment.
<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="l, names, tseed" Name="FactoriseAssocWordLatex" />
 <Returns>  A Factorised String
</Returns>
 <Description>
   Factorises the string representation of an assoc word in letter representation <A>l</A>,
   based on the return value from the undocumented function <Code>FindSubstringPowers</Code>, using the
   passed list of letters <A>names</A>, and a list of reserved numbers <A>tseed</A> (typically
   empty for initial calls).
<P/>
   This method is essentially a LaTeX-specific implementation of the the undocumented function
   <Code>NiceStringAssocWord</Code>.
<P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_LaTeX_Generation_Section_Rendering_LaTeX_Strings">
<Heading>Rendering LaTeX Strings</Heading>

<P/>
 To aid users using <Ref Func="Typeset"/>, being able to view the results quickly in a
 variety of widely-used formats would help streamline the usage of the package. As such,
 a number of functions described below have been written to enable users to render the output
 LaTeX-renderable snippets in different fashions.
<P/>
<ManSection>
  <Func Arg="str[, options]" Name="RenderLatex" />
 <Description>
   Renders a given LaTeX string <A>str</A> in a LaTeX environment,
   providing a visual example of what the string would look like
   in a paper. By default, this involved creating a HTML file that
   includes the MathJax script, but the &GAP; option <A>output</A> can be
   passed to change the rendering method.
<P/>
   Currently implemented rendering methods are:
<List>
<Item>
<Code>"mathjax"</Code>, calling <Ref Func="MathJax" />
</Item>
<Item>
<Code>"pdflatex"</Code>, calling <Ref Func="PDFLatex" />
</Item>
<Item>
<Code>"overleaf"</Code>, calling <Ref Func="Overleaf" />
</Item>
</List>
<P/>
   These functions can be called independently of <Ref Func="RenderLatex"/>,
   which serves only to be a more centralised rendering method for users.
<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="str" Name="PDFLatex" />
 <Description>
   Renders a given LaTeX string <A>str</A> in a new PDF file,
   specifically via the pdflatex bash tool.
<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="str" Name="MathJax" />
 <Description>
   Renders a given LaTeX string <A>str</A> in a HTML file,
   making use of the MathJax and TikzJax scripts.
<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="str" Name="Overleaf" />
 <Description>
   Renders a given LaTeX string <A>str</A> in a new Overleaf project,
   specifically via a URL-encoded snippet.
<P/>
 </Description>
</ManSection>



<ManSection>
  <Func Arg="raw" Name="URIEncodeComponent" />
 <Returns>  A Percent-Encoded String
</Returns>
 <Description>
   Replaces reserved characters within a URI
   component <A>raw</A> as per RFC-3986.
<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="raw" Name="NeedsLatexMathMode" />
 <Returns>  A Boolean
</Returns>
 <Description>
   Determines if the LaTeX snippet <A>raw</A> requires
   LaTeX's math mode to be rendered correctly.
<P/>
 </Description>
</ManSection>


<ManSection>
  <Var Name="DEFAULT_LATEX_PREAMBLE" />
 <Description>
   Default LaTeX preamble string used for creating
   compilable <Code>.tex</Code> files from LaTeX snippets.
 </Description>
</ManSection>


<ManSection>
  <Var Name="DEFAULT_MATHJAX_TAGS" />
 <Description>
   Default HTML document and head tags used to create
   HTML files using MathJax to render LaTeX snippets.
 </Description>
</ManSection>


<ManSection>
  <Var Name="ALWAYS_UNESCAPED_CHARS" />
 <Description>
   String containing all of the characters that do not
   need to be percent-encoded within URI components,
   as per RFC-3986.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_LaTeX_Generation_Section_Digraphs_Integration">
<Heading>Digraphs Integration</Heading>

<P/>
 <Package>digraphs</Package> is a powerful, widely-used packages, implementing
 helpful functionality to work with directed graphs amongst other objects. Due to
 it's popularity, and as a way to demonstrate how <Package>typeset</Package> can
 be integrated with external packages, the following functions have been implemented
 to allow directed graphs to be converted into LaTeX representations.
<P/>
 It should be noted that the conversion implemented here does use the output from
 <Ref BookName="digraphs" Func="DotDigraph" />, which generates the DOT string
 representing a digraph. This is then used to either convert it to a tikz representation
 via the command-line tool dot2tex (using the &GAP; option <Code>digraphOut := "dot2tex"</Code>), or
 simply wrapping it up in a dot2tex environment provided by the LaTeX package dot2texi
 which will compile the wrapped DOT input into tikz during compilation of the LaTeX file
 itself.
<P/>
 While another method could be written to convert the internal representation of a directed
 graph directly into a tikzpicture, this would likely be incredibly convoluted and difficult,
 and may present numerous problems with edge positioning. Therefore, relying on dot2tex was chosen
 as the best approach.
<P/>
<ManSection>
  <Var Name="DEFAULT_DOT2TEX_OPTIONS" />
 <Description>
   Default command-line options passed to the <Code>dot2tex</Code> executable
   to convert dot strings.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="obj" Name="Dot2Tex" />
 <Returns>   A Tikz String
</Returns>
 <Description>
   Executes <Code>dot2tex</Code> on the dot string representing a
   given digraph object <A>obj</A>.
<P/>
 </Description>
</ManSection>


</Section>


<P/>
</Chapter>

